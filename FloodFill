DFS --> T.c --> O(m*n)
        S.c --> O(m*n)
class Solution {
    int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
    int m;int n;
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        m = image.length;
        n = image[0].length;
        if(image[sr][sc] == color){
            return image;
        }
        int initialcolor = image[sr][sc];
        dfs(image,sr,sc,color,initialcolor);
        return image;
    }
    private void dfs(int[][] image, int sr, int sc, int color, int initialcolor){        
       //base
       if(sr<0 || sr==m || sc<0 || sc==n || image[sr][sc] != initialcolor){
          return;
       }else{
        image[sr][sc] = color;
       }
       for(int[] dir: dirs){        
        int nr = sr+dir[0];
        int nc = sc+dir[1];        
        dfs(image,nr,nc,color,initialcolor);
       }
    }
}

*********************************************************
BFS: T.c --> O(m*n)
     S.c --> O(m*n)
class Solution {
    int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
    int m;int n;
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        m = image.length;
        n = image[0].length;
        if(image[sr][sc] == color){
            return image;
        }
        int initialcolor = image[sr][sc];
        image[sr][sc] = color;
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{sr,sc});
        while(!q.isEmpty()){
           int[] curr = q.poll();
           for(int[] dir: dirs){
            int nr = curr[0]+dir[0];
            int nc = curr[1]+dir[1];
            if(nr>=0 && nr<m && nc>=0 && nc<n && image[nr][nc] == initialcolor){
              image[nr][nc] = color;
              q.add(new int[]{nr,nc});
            }
           }
        }
        return image;
    }    
}